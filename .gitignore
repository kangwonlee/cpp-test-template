# Python-specific artifacts
# Ignore compiled Python files to prevent committing bytecode.
__pycache__/
*.py[cod]
*$py.class

# Ignore Python packaging and distribution files to keep the repository clean.
.Python
build/
dist/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Ignore virtual environments to avoid committing environment-specific dependencies.
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Ignore pip and PyPI configuration files to prevent exposing sensitive data.
pip-log.txt
pip-delete-this-directory.txt
.pypirc

# Ignore test and coverage reports to exclude temporary testing artifacts.
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.pytest_cache/

# Ignore Ruff cache files, as your script may use Ruff for linting.
.ruff_cache/

# Ignore mypy and type checker caches to exclude type-checking artifacts.
.mypy_cache/
.dmypy.json
dmypy.json

# General development artifacts
# Ignore macOS metadata files to prevent platform-specific clutter.
.DS_Store

# Ignore Visual Studio Code settings for user-specific IDE configurations.
.vscode/

# Compiled code artifacts (subset for future-proofing)
# Ignore object files and executables in case compiled extensions or tools are added.
*.o
*.obj
*.exe
*.out
*.app

# Ignore shared libraries for potential C/C++ extensions or dependencies.
*.so
*.dll
*.dylib

# Ignore debug symbols to avoid committing debugging artifacts.
*.dSYM/
*.pdb

# Custom patterns for your project
# Ignore temporary logs or JSON outputs from set_vars.py to prevent committing sensitive data.
*.log
*.json

# Ignore image or PDF files, as they are unlikely to be part of the repository.
*.png
*.pdf
